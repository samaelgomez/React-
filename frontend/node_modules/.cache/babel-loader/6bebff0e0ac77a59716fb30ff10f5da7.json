{"ast":null,"code":"import { fakeBackend } from \"./agent/fakeBackend\";\nimport Queries from \"./queries/queries\";\nconst agent = {\n  query: (variables, query) => {\n    return fakeBackend[query](variables);\n  },\n  mutation: (variables, query) => {\n    return fakeBackend[query](variables);\n  }\n};\n\nconst Productor = props => {\n  const {\n    type,\n    query,\n    data\n  } = props;\n  const graphqlQuery = Queries[query];\n  const result = agent[type](data, graphqlQuery);\n  if (result.error) throw result.errorMsg;\n  return result;\n};\n\n_c = Productor;\nexport default Productor;\n/* const agent ={\n    query: (variables,query) =>{\n        return client.query({\n          query: query,\n          fetchPolicy: 'network-only',\n          variables: variables,\n        })\n    },\n    mutation: (variables,query) =>{\n      return client.mutate({\n        mutation: query,\n        variables: variables,\n      })\n    },\n  } */\n\nvar _c;\n\n$RefreshReg$(_c, \"Productor\");","map":{"version":3,"names":["fakeBackend","Queries","agent","query","variables","mutation","Productor","props","type","data","graphqlQuery","result","error","errorMsg"],"sources":["/home/samael/server/test/frontend/src/core/productor/graphql/graphql.productor.js"],"sourcesContent":["import { fakeBackend } from \"./agent/fakeBackend\";\nimport Queries from \"./queries/queries\"\n\nconst agent ={\n    query: (variables,query) =>{\n        return fakeBackend[query](variables)\n    },\n    mutation: (variables,query) =>{\n        return fakeBackend[query](variables)\n    },\n}\nconst Productor = (props) =>{\n    const {type,query,data} = props\n    const graphqlQuery = Queries[query]\n    const result = agent[type](data,graphqlQuery)\n    if(result.error) throw result.errorMsg\n    return result\n}\n\nexport default Productor\n\n/* const agent ={\n    query: (variables,query) =>{\n        return client.query({\n          query: query,\n          fetchPolicy: 'network-only',\n          variables: variables,\n        })\n    },\n    mutation: (variables,query) =>{\n      return client.mutate({\n        mutation: query,\n        variables: variables,\n      })\n    },\n  } */\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAEA,MAAMC,KAAK,GAAE;EACTC,KAAK,EAAE,CAACC,SAAD,EAAWD,KAAX,KAAoB;IACvB,OAAOH,WAAW,CAACG,KAAD,CAAX,CAAmBC,SAAnB,CAAP;EACH,CAHQ;EAITC,QAAQ,EAAE,CAACD,SAAD,EAAWD,KAAX,KAAoB;IAC1B,OAAOH,WAAW,CAACG,KAAD,CAAX,CAAmBC,SAAnB,CAAP;EACH;AANQ,CAAb;;AAQA,MAAME,SAAS,GAAIC,KAAD,IAAU;EACxB,MAAM;IAACC,IAAD;IAAML,KAAN;IAAYM;EAAZ,IAAoBF,KAA1B;EACA,MAAMG,YAAY,GAAGT,OAAO,CAACE,KAAD,CAA5B;EACA,MAAMQ,MAAM,GAAGT,KAAK,CAACM,IAAD,CAAL,CAAYC,IAAZ,EAAiBC,YAAjB,CAAf;EACA,IAAGC,MAAM,CAACC,KAAV,EAAiB,MAAMD,MAAM,CAACE,QAAb;EACjB,OAAOF,MAAP;AACH,CAND;;KAAML,S;AAQN,eAAeA,SAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}