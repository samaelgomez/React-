{"ast":null,"code":"import { TaskQueryModel } from \"../model/queryModels\";\nimport Productor from \"../productor/graphql/graphql.productor\";\nimport { ValidateTask } from \"../utils/validations.utils\";\nconst MovieConsumer = {\n  GetAllTasks: _ref => {\n    let {\n      userData\n    } = _ref;\n    return new Promise((resolve, reject) => {\n      try {\n        let methodResult = [];\n        const {\n          result\n        } = Productor({\n          type: \"query\",\n          query: TaskQueryModel.GET_ALL_TASKS_QUERY,\n          data: userData\n        });\n        methodResult = result.length === 0 ? \"There are no available tasks\" : result;\n        console.log({\n          from: \"getAllTask\",\n          result: methodResult\n        });\n        resolve(methodResult);\n      } catch (error) {\n        resolve({\n          error: true,\n          errorMsg: error\n        });\n      }\n    });\n  },\n  GetAllTaskFromAUser: _ref2 => {\n    let {\n      userData,\n      userName\n    } = _ref2;\n    return new Promise((resolve, reject) => {\n      try {\n        let methodResult = [];\n        const {\n          result\n        } = Productor({\n          type: \"query\",\n          query: TaskQueryModel.GET_ALL_TASKS_BY_ASSIGNEDTO,\n          data: {\n            userData: userData,\n            filter: userName\n          }\n        });\n        methodResult = result.length === 0 ? \"There are no available tasks\" : result;\n        console.log({\n          from: \"GetAllTaskFromAUser\",\n          result: methodResult\n        });\n        resolve(methodResult);\n      } catch (error) {\n        resolve({\n          error: true,\n          errorMsg: error\n        });\n      }\n    });\n  },\n  CreateTask: _ref3 => {\n    let {\n      userData,\n      newTask\n    } = _ref3;\n    return new Promise((resolve, reject) => {\n      try {\n        ValidateTask(newTask);\n        const {\n          result\n        } = Productor({\n          type: \"mutation\",\n          query: TaskQueryModel.CREATE_TASK,\n          data: {\n            userData: userData,\n            newTask: newTask\n          }\n        });\n        console.log({\n          from: \"CreateTask\",\n          result: result\n        });\n        resolve(result);\n      } catch (error) {\n        resolve({\n          error: true,\n          errorMsg: error\n        });\n      }\n    });\n  },\n  UpdateTask: _ref4 => {\n    let {\n      userData,\n      taskId,\n      updatedTask\n    } = _ref4;\n    return new Promise((resolve, reject) => {\n      try {\n        ValidateTask(updatedTask);\n        const {\n          result\n        } = Productor({\n          type: \"mutation\",\n          query: TaskQueryModel.UPDATE_TASK,\n          data: {\n            userData: userData,\n            taskId: taskId,\n            updatedTask: updatedTask\n          }\n        });\n        console.log({\n          from: \"UpdateTask\",\n          result: result\n        });\n        resolve(result);\n      } catch (error) {\n        resolve({\n          error: true,\n          errorMsg: error\n        });\n      }\n    });\n  },\n  DeleteTask: _ref5 => {\n    let {\n      userData,\n      taskId\n    } = _ref5;\n    return new Promise((resolve, reject) => {\n      try {\n        const {\n          result\n        } = Productor({\n          type: \"mutation\",\n          query: TaskQueryModel.DELETE_TASK,\n          data: {\n            userData: userData,\n            taskId: taskId\n          }\n        });\n        console.log({\n          from: \"getAllTask\",\n          result: result\n        });\n        resolve(result);\n      } catch (error) {\n        resolve({\n          error: true,\n          errorMsg: error\n        });\n      }\n    });\n  },\n  GetAllMovies: () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const result = Productor({\n          query: TaskQueryModel.GET_ALL_MOVIES\n        });\n        console.log({\n          from: \"GetAllMovies\",\n          result: result\n        });\n        resolve(result);\n      } catch (error) {\n        resolve({\n          error: true,\n          errorMsg: error\n        });\n      }\n    });\n  }\n};\nexport default TaskConsumer;","map":{"version":3,"names":["TaskQueryModel","Productor","ValidateTask","MovieConsumer","GetAllTasks","userData","Promise","resolve","reject","methodResult","result","type","query","GET_ALL_TASKS_QUERY","data","length","console","log","from","error","errorMsg","GetAllTaskFromAUser","userName","GET_ALL_TASKS_BY_ASSIGNEDTO","filter","CreateTask","newTask","CREATE_TASK","UpdateTask","taskId","updatedTask","UPDATE_TASK","DeleteTask","DELETE_TASK","GetAllMovies","GET_ALL_MOVIES","TaskConsumer"],"sources":["/home/samael/server/test/frontend/src/core/consumer/movies.consumer.js"],"sourcesContent":["import { TaskQueryModel } from \"../model/queryModels\"\nimport Productor from \"../productor/graphql/graphql.productor\"\nimport {ValidateTask} from \"../utils/validations.utils\"\n\nconst MovieConsumer = {\n    GetAllTasks: ({userData}) =>{\n        return new Promise((resolve,reject)=>{\n             try {\n                 let methodResult = []\n                 const {result} = Productor({type:\"query\",query:TaskQueryModel.GET_ALL_TASKS_QUERY,data:userData})\n                 methodResult = result.length===0 ? \"There are no available tasks\" : result\n                 console.log({from:\"getAllTask\",result:methodResult});\n                 resolve(methodResult)\n             } catch (error) {\n                 resolve({error:true, errorMsg:error})\n             }\n        })\n     \n    },\n    GetAllTaskFromAUser: ({userData,userName}) =>{\n        return new Promise((resolve,reject)=>{\n             try {\n                let methodResult = []\n                const {result} = Productor({type:\"query\",query:TaskQueryModel.GET_ALL_TASKS_BY_ASSIGNEDTO,data:{userData:userData,filter:userName}})\n                methodResult = result.length===0 ? \"There are no available tasks\" : result\n                console.log({from:\"GetAllTaskFromAUser\",result:methodResult});\n                resolve(methodResult)\n             } catch (error) {\n                 resolve({error:true, errorMsg:error})\n             }\n        })\n     \n    },\n    CreateTask: ({userData,newTask}) =>{\n        return new Promise((resolve,reject)=>{\n             try {\n                ValidateTask(newTask)\n                const {result} = Productor({type:\"mutation\",query:TaskQueryModel.CREATE_TASK,data:{userData:userData,newTask:newTask}})\n                console.log({from:\"CreateTask\",result:result});\n                resolve(result)\n             } catch (error) {\n                 resolve({error:true, errorMsg:error})\n             }\n        })\n     \n    },\n    UpdateTask: ({userData,taskId,updatedTask}) =>{\n        return new Promise((resolve,reject)=>{\n             try {\n                ValidateTask(updatedTask)\n                const {result} = Productor({type:\"mutation\",query:TaskQueryModel.UPDATE_TASK,data:{userData:userData,taskId:taskId,updatedTask:updatedTask}})\n                console.log({from:\"UpdateTask\",result:result});\n                resolve(result)\n             } catch (error) {\n                 resolve({error:true, errorMsg:error})\n             }\n        })\n     \n    },\n    DeleteTask: ({userData,taskId}) =>{\n        return new Promise((resolve,reject)=>{\n             try {\n                 const {result} = Productor({type:\"mutation\",query:TaskQueryModel.DELETE_TASK,data:{userData:userData, taskId:taskId}})\n                 console.log({from:\"getAllTask\",result:result});\n                 resolve(result)\n             } catch (error) {\n                 resolve({error:true, errorMsg:error})\n             }\n        })\n     \n    },\n    GetAllMovies: () =>{\n        return new Promise((resolve,reject)=>{\n            try {\n                const result = Productor({query:TaskQueryModel.GET_ALL_MOVIES})\n                console.log({from:\"GetAllMovies\",result:result});\n                resolve(result)\n            } catch (error) {\n                resolve({error:true, errorMsg:error})\n            }\n       })\n    }\n}\n\n\n\nexport default TaskConsumer "],"mappings":"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"},"metadata":{},"sourceType":"module"}