{"ast":null,"code":"const date = new Date();\nconst tasksDb = [{\n  id: 1,\n  taskName: \"Tarea1\",\n  taskCreationData: date.getDate(),\n  taskDescription: \"Tarea 1 Description\",\n  taskAssignedBy: \"Pablo\",\n  taskAssignedTo: \"Pablo\",\n  taskObservations: \"Is the task 1\",\n  taskLastUpdate: date.getDate(),\n  taskCliente: \"Cliente 1\",\n  taskType: \"llamada\",\n  taskDone: false\n}, {\n  id: 2,\n  taskName: \"Tarea2\",\n  taskCreationData: date.getDate(),\n  taskDescription: \"Tarea 2 Description\",\n  taskAssignedBy: \"Pablo\",\n  taskAssignedTo: \"normalUser\",\n  taskObservations: \"Is the task 2\",\n  taskLastUpdate: date.getDate(),\n  taskCliente: \"Cliente 1\",\n  taskType: \"llamada\",\n  taskDone: false\n}, {\n  id: 3,\n  taskName: \"Tarea3\",\n  taskCreationData: date.getDate(),\n  taskDescription: \"Tarea 3 Description\",\n  taskAssignedBy: \"Pablo\",\n  taskAssignedTo: \"normalUser\",\n  taskObservations: \"Is the task 3\",\n  taskLastUpdate: date.getDate(),\n  taskCliente: \"Cliente 1\",\n  taskType: \"llamada\",\n  taskDone: false\n}];\n\nconst isLogin = userData => {\n  const {\n    userName,\n    rol\n  } = userData;\n\n  if (userName === undefined) {\n    return {\n      error: true,\n      errorMsg: \"This action requires to be loged\"\n    };\n  }\n\n  return {\n    error: false\n  };\n};\n\nconst isNotValidToDoThisAction = userData => {\n  const {\n    userName,\n    rol\n  } = userData;\n\n  if (userName === undefined) {\n    return {\n      error: true,\n      errorMsg: \"This action requires to be loged\"\n    };\n  }\n\n  if (![\"admin\", \"superAdmin\"].includes(rol)) {\n    return {\n      error: true,\n      errorMsg: \"This action requires to be an admin or superAdmin\"\n    };\n  }\n\n  return {\n    error: false\n  };\n};\n\nconst fakeBackend = {\n  login: userData => {\n    const dbUsers = {\n      Pablo: {\n        error: false,\n        token: \"token\",\n        demo: {\n          userName: userData.userName,\n          rol: \"admin\",\n          verify: true\n        }\n      },\n      normalUser: {\n        error: false,\n        token: \"token\",\n        demo: {\n          userName: userData.userName,\n          rol: \"usuario\",\n          verify: false\n        }\n      }\n    };\n    const exists = dbUsers[userData.userName];\n    return exists ? exists : {\n      error: true,\n      errorMsg: \"The user doesn't exists\"\n    };\n  },\n  getAllTasks: userData => {\n    const isNotValid = isNotValidToDoThisAction(userData);\n    return isNotValid.error ? isNotValid : {\n      error: false,\n      result: tasksDb\n    };\n  },\n  getAllTaskByAssignedTo: _ref => {\n    let {\n      userData,\n      filter\n    } = _ref;\n    const isNotValid = isLogin(userData);\n    return isNotValid.error ? isNotValid : {\n      error: false,\n      result: tasksDb.filter(task => task.taskAssignedTo === filter)\n    };\n  },\n  createTask: _ref2 => {\n    let {\n      userData,\n      newTask\n    } = _ref2;\n    const isNotValid = isNotValidToDoThisAction(userData);\n    tasksDb.push(newTask);\n    return isNotValid.error ? isNotValid : {\n      error: false,\n      result: tasksDb\n    };\n  },\n  updateTask: _ref3 => {\n    let {\n      userData,\n      taskId,\n      updatedTask\n    } = _ref3;\n    const isNotValid = isNotValidToDoThisAction(userData);\n    const index = tasksDb.findIndex(task => task.id == taskId);\n    const result = tasksDb[index] = updatedTask;\n    return isNotValid.error ? isNotValid : {\n      error: false,\n      result: result\n    };\n  },\n  deleteTask: _ref4 => {\n    let {\n      userData,\n      taskId\n    } = _ref4;\n    const isNotValid = isNotValidToDoThisAction(userData);\n    return isNotValid.error ? isNotValid : {\n      error: false,\n      result: tasksDb.filter(task => task.id !== taskId)\n    };\n  }\n};\nexport { fakeBackend };","map":{"version":3,"names":["date","Date","tasksDb","id","taskName","taskCreationData","getDate","taskDescription","taskAssignedBy","taskAssignedTo","taskObservations","taskLastUpdate","taskCliente","taskType","taskDone","isLogin","userData","userName","rol","undefined","error","errorMsg","isNotValidToDoThisAction","includes","fakeBackend","login","dbUsers","Pablo","token","demo","verify","normalUser","exists","getAllTasks","isNotValid","result","getAllTaskByAssignedTo","filter","task","createTask","newTask","push","updateTask","taskId","updatedTask","index","findIndex","deleteTask"],"sources":["/home/samael/server/test/frontend/src/core/productor/graphql/agent/fakeBackend.js"],"sourcesContent":["const date = new Date()\nconst tasksDb = [\n    {\n        id: 1,\n        taskName: \"Tarea1\",\n        taskCreationData: date.getDate(),\n        taskDescription: \"Tarea 1 Description\" ,\n        taskAssignedBy: \"Pablo\",\n        taskAssignedTo: \"Pablo\",\n        taskObservations: \"Is the task 1\",\n        taskLastUpdate: date.getDate(),\n        taskCliente: \"Cliente 1\",\n        taskType: \"llamada\",\n        taskDone: false\n    },\n    {\n        id: 2,\n        taskName: \"Tarea2\",\n        taskCreationData: date.getDate(),\n        taskDescription: \"Tarea 2 Description\" ,\n        taskAssignedBy: \"Pablo\",\n        taskAssignedTo: \"normalUser\",\n        taskObservations: \"Is the task 2\",\n        taskLastUpdate: date.getDate(),\n        taskCliente: \"Cliente 1\",\n        taskType: \"llamada\",\n        taskDone: false\n    },\n    {\n        id: 3,\n        taskName: \"Tarea3\",\n        taskCreationData: date.getDate(),\n        taskDescription: \"Tarea 3 Description\" ,\n        taskAssignedBy: \"Pablo\",\n        taskAssignedTo: \"normalUser\",\n        taskObservations: \"Is the task 3\",\n        taskLastUpdate: date.getDate(),\n        taskCliente: \"Cliente 1\",\n        taskType: \"llamada\",\n        taskDone: false\n    },\n]\n\nconst isLogin = (userData) =>{\n    const {userName, rol} = userData\n    if (userName===undefined) {\n        return {error:true,errorMsg:\"This action requires to be loged\"}\n    }\n    return {error:false}\n}\n\nconst isNotValidToDoThisAction = (userData) =>{\n    const {userName, rol} = userData\n    if (userName===undefined) {\n        return {error:true,errorMsg:\"This action requires to be loged\"}\n    }\n    if (![\"admin\",\"superAdmin\"].includes(rol)) {\n        return {error:true,errorMsg:\"This action requires to be an admin or superAdmin\"}\n    }\n    return {error:false}\n}\n\nconst fakeBackend = {\n    login: (userData)=>{\n        const dbUsers = {\n            Pablo:{error:false,token:\"token\",demo:{userName:userData.userName, rol:\"admin\", verify:true}},\n            normalUser:{error:false,token:\"token\",demo:{userName:userData.userName, rol:\"usuario\", verify:false}}\n        }\n        const exists = dbUsers[userData.userName]\n        return exists ? exists : {error:true,errorMsg:\"The user doesn't exists\"}\n    },\n    getAllTasks:(userData)=>{\n        const isNotValid = isNotValidToDoThisAction(userData);\n        return isNotValid.error ? isNotValid :  {error:false, result:tasksDb}\n    },\n    getAllTaskByAssignedTo:({userData,filter})=>{\n        const isNotValid = isLogin(userData)\n        return isNotValid.error ? isNotValid : {error:false, result:tasksDb.filter(task => task.taskAssignedTo === filter ) }\n    },\n    createTask:({userData,newTask})=>{\n        const isNotValid = isNotValidToDoThisAction(userData)\n        tasksDb.push(newTask)\n        return isNotValid.error ? isNotValid : {error:false, result:tasksDb }\n    },\n    updateTask:({userData,taskId,updatedTask})=>{\n        const isNotValid = isNotValidToDoThisAction(userData)\n        const index =  tasksDb.findIndex((task => task.id == taskId));\n        const result = tasksDb[index] = updatedTask\n        return isNotValid.error ? isNotValid : {error:false, result:result}\n    },\n    deleteTask:({userData,taskId})=>{\n        const isNotValid = isNotValidToDoThisAction(userData)\n        return isNotValid.error ? isNotValid : {error:false, result:tasksDb.filter(task => task.id !== taskId ) }\n    },\n}\n\nexport {\n    fakeBackend\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}